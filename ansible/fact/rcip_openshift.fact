#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Author: Florian Lambert <flambert@redhat.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Requirments: python
#
# Fact ansible to get the service ips

import sys
import argparse
import subprocess
import httplib
import json

VERSION = '1.0'

class Rcip_openshift_fact(object):
  """
  A little object for use REST openshift v3 api
  """

  proto = 'https'
  host = '127.0.0.1'
  port = 8443
  token = None
  tokenfile = '/etc/sensu/openshift_token'
  headers = None
  response = None
  base_uri = None
  base_api = '/api/v1beta3/'
  namespace = "default"

  def __init__(self, host=None, port=None, tokenfile=None, proto=None):
     if proto is not None:
         self.proto = proto

     if host is not None:
         self.host = host

     if tokenfile is not None:
         self.tokenfile = tokenfile

     self.base_uri = self.proto + "://" + self.host +  self.base_api

     self.token=self._tokenfile(self.tokenfile)

  def _tokenfile(self,tokenfile):
     try:
       f = open(tokenfile, 'r')
       return f.readline().strip()
     except IOError:
       self.os_OUTPUT_MESSAGE += ' Error: File does not appear to exist'
       self.os_STATE = 2
       return "tokenfile-inaccessible"

  def get_svc(self,namespace=None):

     print '{'
     print '  "openshift_registry_cluster_ip": "openshift_registry_cluster_ip",'
     print '  "openshift_router_cluster_ip": "openshift_router_cluster_ip",'
     print '  "openshift_registry_kubernetes_ip": "openshift_registry_kubernetes_ip"'
     print '}'
     if namespace:
         self.namespace = namespace
     api_svc = self.base_api + 'namespaces/' + self.namespace + '/services'

     headers = {"Authorization": 'Bearer ' + self.token}
     conn = httplib.HTTPSConnection(self.host, self.port)
     conn.request("GET", api_svc, "", headers)

     r1 = conn.getresponse()
     rjson = r1.read()
     conn.close()

     try:
       parsed_json = json.loads(rjson)
     except ValueError:
       print "%s: GET %s %s" % (STATE_TEXT[STATE_UNKNOWN], api_svc, rjson)
       sys.exit(STATE_UNKNOWN)

     ansible_facts_dict = {'service': {}}
     for item in parsed_json["items"]:
       print item["metadata"]["name"]
       print item["spec"]["portalIP"]

       ansible_facts_dict['service'][item["metadata"]["name"]] = item["spec"]["portalIP"]

     print json.dumps(ansible_facts_dict)


if __name__ == "__main__":

   # https://docs.openshift.com/enterprise/3.0/rest_api/openshift_v1.html

      myosfact = Rcip_openshift_fact()
      myosfact.get_svc()
